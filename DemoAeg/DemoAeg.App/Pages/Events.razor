@page "/events"
@using Microsoft.AspNetCore.SignalR.Client;

<PageTitle>Events</PageTitle>

<h1>Events</h1>

@if (!IsConnected)
{
    <div class="form-group">
        <label>
            Agent login :
            <input @bind="agentLogin" />
        </label>
    </div>
    <button @onclick="Connect">Se connecter</button>
}
else
{
    <div class="form-group">
        <label>
            Bonjour @agentLogin
        </label>
    </div>
    <button @onclick="Disconnect">Se déconnecter</button>
    <hr />
    <h2>Liste des évènements</h2>
    <ul id="messagesList">
        @foreach (var eventItem in events)
        {
            <li>@eventItem</li>
        }
    </ul>
}

@code {
    private const string EVENTTYPE_TELEPHONIE_DECROCHER = "Demo.Telephonie.Decrocher";
    private HubConnection? hubConnection;
    private List<string> events = new List<string>();
    private string? agentLogin;
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    protected async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl($"https://localhost:7230/eventhub?agentLogin={agentLogin}")
            .Build();

        hubConnection.On<string, string, string>(EVENTTYPE_TELEPHONIE_DECROCHER, (telephone, wait, callerName) =>
        {
            var encodedMsg = $"Appel entrant de {callerName} ({telephone}), attente = {wait}";
            events.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        events.Clear();
        StateHasChanged();
    }

    protected async Task Disconnect()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await Disconnect();
    }
}